{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Swiss Data Custodian Swiss Data Custodian is a system for secure and privacy-preserving data sharing and processing. Start with Custodian - Learn about Custodian and its fundamental concepts. Try Custodian - Follow tutorials to learn how to use the Custodian. Future development - Learn about the upcoming Custodian features . Look up reference information - Browse terminology and API ressources.","title":"Home"},{"location":"#about-swiss-data-custodian","text":"Swiss Data Custodian is a system for secure and privacy-preserving data sharing and processing. Start with Custodian - Learn about Custodian and its fundamental concepts. Try Custodian - Follow tutorials to learn how to use the Custodian. Future development - Learn about the upcoming Custodian features . Look up reference information - Browse terminology and API ressources.","title":"About Swiss Data Custodian"},{"location":"concept/acs/","text":"ACS Access Control system is a system for fine-grained, dynamic authorization. It can evaluate user identity, contract, ressource and context to make realtime decisions. The Access Control System API request and response flow is represented below. Policy Decision Point This mechanism evaluates the access requests to resources against the authorization policies available in a contract to determine whether specific access should be granted to a user who issued the request. The Policy decision point API provides a standards-based HTTP REST API for decisions determined on the contract policies. Policy Enforcement Point This mechanism is responsible for receiving authorization requests sent later to the policy decision point for evaluation. It also evaluates an authorization decision made by the Policy Decision Point and doesn't require any authorization logic. Event Processing Point This mechanism is responsible for tracking and analyzing the data about the activities occurring in the Swiss Data Custodian and aggregate them to represent the state of the Swiss Data Custodian.","title":"ACS"},{"location":"concept/acs/#acs","text":"Access Control system is a system for fine-grained, dynamic authorization. It can evaluate user identity, contract, ressource and context to make realtime decisions. The Access Control System API request and response flow is represented below.","title":"ACS"},{"location":"concept/acs/#policy-decision-point","text":"This mechanism evaluates the access requests to resources against the authorization policies available in a contract to determine whether specific access should be granted to a user who issued the request. The Policy decision point API provides a standards-based HTTP REST API for decisions determined on the contract policies.","title":"Policy Decision Point"},{"location":"concept/acs/#policy-enforcement-point","text":"This mechanism is responsible for receiving authorization requests sent later to the policy decision point for evaluation. It also evaluates an authorization decision made by the Policy Decision Point and doesn't require any authorization logic.","title":"Policy Enforcement Point"},{"location":"concept/acs/#event-processing-point","text":"This mechanism is responsible for tracking and analyzing the data about the activities occurring in the Swiss Data Custodian and aggregate them to represent the state of the Swiss Data Custodian.","title":"Event Processing Point"},{"location":"concept/components/","text":"Components This section helps you learn about the components of the Swiss Data Science system and helps you to have a deeper understanding of how it works. Access Control system The system for managing access to the ressources. concept/acs.md Contract Manager The contract manager provides a Workflow for processing contracts for data sharing and processing. A Contract workflow as the following step: 1. Contract Template Creation 2. Contract Approvals 3. Contract Signatures 4. Contract Execution 5. Contract Revocation Event Tracking System The event tracking system provides an audit trail of all the events created by the custodian components. It captures each entity along and their actions as a Web of relationships in a consistent way. This allows any authorized party to: Trace back the ownership of the data ressources Track the use of the data ressources. Verify that all actions on these resources are carried out in conformance to the respective owner's rights.","title":"Components"},{"location":"concept/components/#components","text":"This section helps you learn about the components of the Swiss Data Science system and helps you to have a deeper understanding of how it works.","title":"Components"},{"location":"concept/components/#access-control-system","text":"The system for managing access to the ressources. concept/acs.md","title":"Access Control system"},{"location":"concept/components/#contract-manager","text":"The contract manager provides a Workflow for processing contracts for data sharing and processing. A Contract workflow as the following step: 1. Contract Template Creation 2. Contract Approvals 3. Contract Signatures 4. Contract Execution 5. Contract Revocation","title":"Contract Manager"},{"location":"concept/components/#event-tracking-system","text":"The event tracking system provides an audit trail of all the events created by the custodian components. It captures each entity along and their actions as a Web of relationships in a consistent way. This allows any authorized party to: Trace back the ownership of the data ressources Track the use of the data ressources. Verify that all actions on these resources are carried out in conformance to the respective owner's rights.","title":"Event Tracking System"},{"location":"concept/contract/","text":"Contract Manager The Contract Manager provides REST end-points to create and manage contracts. A Contract is a binding agreement between parties based on agreed-upon terms and conditions for data sharing and processing. A contract is readable by both people and machines. It is also cryptographically signed and verified against some security proofs. Contract Description A contract consist of a contract body that describes the terms of the contract and a list of digital signatures of the parties involved in. Elements of Contract Body Entry Required Description Schema id yes A globally unique contract identifier - tag no The list of tag (name, value) pairs that can be used to index the contract for faster retrieval List of Tag contract yes A list of human-readable descriptions of the contract List of Contract var no The list of values that can be dereferenced in other part of the contract body, or template parameter whose values are defined in subsequent versions of the contract List of Var subject yes The list of subjects who may perform the operations described in the contract List of Subject verb yes The list of allowed operations List of Verb object yes The list of resources that subjects are permitted to operate on List of Object scope yes The list of permitted subject, verb, object triplets. - validity yes The conditions used to verify the validity of the contract. - Example of Contrat Body in Json format { \"id\": \"did:custodian:12345678abcdefgh\", \"tag\": [ { \"name\": \"provider\", \"value\": \"#provider\" }, { \"name\": \"consumer\", \"value\": \"#consumer\" }, ], \"contract\": [ { \"lang\": \"en\", \"title\": \"End User Agreement\", \"description\": \"...\", } ], \"var\": [ { \"id\": \"did:custodian:12345678abcdefgh#provider\", \"type\": \"oid\", \"regexp\": \"did:custodian:[0-9a-zA-Z_-]\" }, { \"id\": \"did:custodian:12345678abcdefgh#consumer\", \"value\": \"did:custodian:1234abcd5678efgh\" } ], \"subject\": [ { \"id\": \"did:custodian:12345678abcdefgh#subj-1\", \"attribute\": { \"oid\": \"#provider\", \"sign\": [ \"#id\" ] } }, { \"id\": \"did:custodian:12345678abcdefgh#subj-2\", \"attribute\": { \"oid\": \"#consumer\", \"sign\": [ \"#id\" ] } } ], \"verb\": [ { \"id\": \"did:custodian:12345678abcdefgh#read\", \"function\": \"custodian.epfl.ch/select?query=*\", \"attribute\": { \"max_calls_per_day\": 3 } }, { \"id\": \"did:custodian:12345678abcdefgh#add\", \"function\": \"custodian.epfl.ch/add\", \"attribute\": {} } ], \"object\": [ { \"id\": \"did:custodian:12345678abcdefgh#obj-1\", \"owner\": \"#subj-1\", \"attribute\": { \"sensitivity\": { \"op\": \"lt\", \"level\": 7 } } } ], \"scope\": [ { \"subject\": [ \"#subj-1\", \"#subj-2\" ], \"verb\": [ \"#read\" ], \"object\": [ \"#obj-1\" ] }, { \"subject\": [ \"#subj-2\" ], \"verb\": [ \"#add\" ], \"object\": [ \"#obj-1\" ] } ], \"validity\": { \"notBefore\" : \"2022-01-01T00:00:00Z\", \"notAfter\" : \"2022-12-01T23:59:59Z\", \"duration\" : \"1Y\", \"sign\" : [ \"#provider\", \"#consumer\" ] } } Digital Signatures Contract signatures are unforgeable and non-repudiable proofs that a user has agreed to a contract. The JSON signature consists of a header and a seal. Elements of Signature Entry Required Description id yes A globally unique signature identifier header.body yes Verifiable reference to the contract body: its identity, base64 digest (hash) and method used to compute the digest header.body.id yes The contract's identity header.body.digestMethod yes The methods used to compute the contract's digest header.body.digest yes The current contract's digest. header.prev no The verifiable reference to a previous signature if any, otherwise it must not appear in the signature. header.prev.id yes The previous signature's identity. header.prev.digestMethod yes The methods used to compute the previous signature:21's digest. header.prev.digest yes The previous contract's digest. seal[].signee yes The identity and public key of the user signing the document seal[].timestamp yes The signature timestamp, and a nonce seal[].source yes The hash or unique representation of inputs and method used to create the contract body and signature, so that it can be used to deduplicate signatures seal[].signature yes The base64 digest of the header part (everything between { and } included) encrypted with the secret key of the header.signee using the seal.signatureMethod seal[].signatureMethod yes Signature method, subsums the header digest method Example Of Json Signature { \"id\": \"did:custodian:12345678zyxwvut\", \"header\": { \"body\": { \"id\": \"did:custodian:12345678abcdefgh\", \"digestMethod\": \"SHA256base64\", \"digest\": \"H/y/vkDEqVOeisYHEJynZJ7FnzGmJgNqbYOZEIBN1l4=\" }, \"prev\": { \"id\": \"did:custodian:87654321zyxwvu\", \"digestMethod\": \"SHA256base64\", \"digest\": \"Yqca1ey8ltbDI7eApqRrzVa0IcKSoRPLL6poGSJln/Y=\" }, }, \"seal\": [ { \"signee\": \"did:custodian:12345678abcdefgh?kid=00123456habc123\", \"timestamp\": \"2022-05-01T19:07:31Z\", \"source\": \"bd4299f40251028465a541e52e1c24f3de5703c048ecce0f12ffeb95a06845a3\", \"signatureMethod\": \"ECDSA\", \"signature\": \"SumXX3esbBrXIsfafJCYQXAruPGX4DgSoGlD/ozKtO5AY98ErTQX/NGpOGaKNwCkResqtG9IeuyvdDh7eJMcWw==\" } ] }","title":"Contract Manager"},{"location":"concept/contract/#contract-manager","text":"The Contract Manager provides REST end-points to create and manage contracts. A Contract is a binding agreement between parties based on agreed-upon terms and conditions for data sharing and processing. A contract is readable by both people and machines. It is also cryptographically signed and verified against some security proofs.","title":"Contract Manager"},{"location":"concept/contract/#contract-description","text":"A contract consist of a contract body that describes the terms of the contract and a list of digital signatures of the parties involved in. Elements of Contract Body Entry Required Description Schema id yes A globally unique contract identifier - tag no The list of tag (name, value) pairs that can be used to index the contract for faster retrieval List of Tag contract yes A list of human-readable descriptions of the contract List of Contract var no The list of values that can be dereferenced in other part of the contract body, or template parameter whose values are defined in subsequent versions of the contract List of Var subject yes The list of subjects who may perform the operations described in the contract List of Subject verb yes The list of allowed operations List of Verb object yes The list of resources that subjects are permitted to operate on List of Object scope yes The list of permitted subject, verb, object triplets. - validity yes The conditions used to verify the validity of the contract. - Example of Contrat Body in Json format { \"id\": \"did:custodian:12345678abcdefgh\", \"tag\": [ { \"name\": \"provider\", \"value\": \"#provider\" }, { \"name\": \"consumer\", \"value\": \"#consumer\" }, ], \"contract\": [ { \"lang\": \"en\", \"title\": \"End User Agreement\", \"description\": \"...\", } ], \"var\": [ { \"id\": \"did:custodian:12345678abcdefgh#provider\", \"type\": \"oid\", \"regexp\": \"did:custodian:[0-9a-zA-Z_-]\" }, { \"id\": \"did:custodian:12345678abcdefgh#consumer\", \"value\": \"did:custodian:1234abcd5678efgh\" } ], \"subject\": [ { \"id\": \"did:custodian:12345678abcdefgh#subj-1\", \"attribute\": { \"oid\": \"#provider\", \"sign\": [ \"#id\" ] } }, { \"id\": \"did:custodian:12345678abcdefgh#subj-2\", \"attribute\": { \"oid\": \"#consumer\", \"sign\": [ \"#id\" ] } } ], \"verb\": [ { \"id\": \"did:custodian:12345678abcdefgh#read\", \"function\": \"custodian.epfl.ch/select?query=*\", \"attribute\": { \"max_calls_per_day\": 3 } }, { \"id\": \"did:custodian:12345678abcdefgh#add\", \"function\": \"custodian.epfl.ch/add\", \"attribute\": {} } ], \"object\": [ { \"id\": \"did:custodian:12345678abcdefgh#obj-1\", \"owner\": \"#subj-1\", \"attribute\": { \"sensitivity\": { \"op\": \"lt\", \"level\": 7 } } } ], \"scope\": [ { \"subject\": [ \"#subj-1\", \"#subj-2\" ], \"verb\": [ \"#read\" ], \"object\": [ \"#obj-1\" ] }, { \"subject\": [ \"#subj-2\" ], \"verb\": [ \"#add\" ], \"object\": [ \"#obj-1\" ] } ], \"validity\": { \"notBefore\" : \"2022-01-01T00:00:00Z\", \"notAfter\" : \"2022-12-01T23:59:59Z\", \"duration\" : \"1Y\", \"sign\" : [ \"#provider\", \"#consumer\" ] } } Digital Signatures Contract signatures are unforgeable and non-repudiable proofs that a user has agreed to a contract. The JSON signature consists of a header and a seal. Elements of Signature Entry Required Description id yes A globally unique signature identifier header.body yes Verifiable reference to the contract body: its identity, base64 digest (hash) and method used to compute the digest header.body.id yes The contract's identity header.body.digestMethod yes The methods used to compute the contract's digest header.body.digest yes The current contract's digest. header.prev no The verifiable reference to a previous signature if any, otherwise it must not appear in the signature. header.prev.id yes The previous signature's identity. header.prev.digestMethod yes The methods used to compute the previous signature:21's digest. header.prev.digest yes The previous contract's digest. seal[].signee yes The identity and public key of the user signing the document seal[].timestamp yes The signature timestamp, and a nonce seal[].source yes The hash or unique representation of inputs and method used to create the contract body and signature, so that it can be used to deduplicate signatures seal[].signature yes The base64 digest of the header part (everything between { and } included) encrypted with the secret key of the header.signee using the seal.signatureMethod seal[].signatureMethod yes Signature method, subsums the header digest method Example Of Json Signature { \"id\": \"did:custodian:12345678zyxwvut\", \"header\": { \"body\": { \"id\": \"did:custodian:12345678abcdefgh\", \"digestMethod\": \"SHA256base64\", \"digest\": \"H/y/vkDEqVOeisYHEJynZJ7FnzGmJgNqbYOZEIBN1l4=\" }, \"prev\": { \"id\": \"did:custodian:87654321zyxwvu\", \"digestMethod\": \"SHA256base64\", \"digest\": \"Yqca1ey8ltbDI7eApqRrzVa0IcKSoRPLL6poGSJln/Y=\" }, }, \"seal\": [ { \"signee\": \"did:custodian:12345678abcdefgh?kid=00123456habc123\", \"timestamp\": \"2022-05-01T19:07:31Z\", \"source\": \"bd4299f40251028465a541e52e1c24f3de5703c048ecce0f12ffeb95a06845a3\", \"signatureMethod\": \"ECDSA\", \"signature\": \"SumXX3esbBrXIsfafJCYQXAruPGX4DgSoGlD/ozKtO5AY98ErTQX/NGpOGaKNwCkResqtG9IeuyvdDh7eJMcWw==\" } ] }","title":"Contract Description"},{"location":"concept/event/","text":"Event Tracking System This system enables data owners to trace data journey and answer the following questions: - where is the data hosted (which IAD)? - what data is being accessed, since when, until when? - what application has access to the data, from where, and on whom's behalf? - what post-processing results came out of the data? - who has access to the results? - Who tries to access a resource without authorization? Governance bodies can audit the events and verify that contracts are respected. The data controllers can use these events to demonstrate compliance with data protection laws. Data providers can define data usage metrics for analyzing data consumption based on these events. Finally, these events are a source of contextual information for the Policy Information Point (PIP). In the future, we envision an intelligent Adaptive Privacy Based Access Control that uses this contextual information as knowledge to dynamically grant data access based on privacy scores and privacy budget.","title":"Event Tracking System"},{"location":"concept/event/#event-tracking-system","text":"This system enables data owners to trace data journey and answer the following questions: - where is the data hosted (which IAD)? - what data is being accessed, since when, until when? - what application has access to the data, from where, and on whom's behalf? - what post-processing results came out of the data? - who has access to the results? - Who tries to access a resource without authorization? Governance bodies can audit the events and verify that contracts are respected. The data controllers can use these events to demonstrate compliance with data protection laws. Data providers can define data usage metrics for analyzing data consumption based on these events. Finally, these events are a source of contextual information for the Policy Information Point (PIP). In the future, we envision an intelligent Adaptive Privacy Based Access Control that uses this contextual information as knowledge to dynamically grant data access based on privacy scores and privacy budget.","title":"Event Tracking System"},{"location":"concept/overview/","text":"Swiss Data Custodian overview The Swiss Data Custodian is an open platform for governing data access and processing. It enables to separate data from its usage, so you can get insight from data without the burden of data protection law compliance. By taking advantage of The Swiss Data Custodian for sharing data, governing data access, you can significantly reduce the delay between accessing third-party data, law compliance and consuming data. Architecture","title":"Overview"},{"location":"concept/overview/#swiss-data-custodian-overview","text":"The Swiss Data Custodian is an open platform for governing data access and processing. It enables to separate data from its usage, so you can get insight from data without the burden of data protection law compliance. By taking advantage of The Swiss Data Custodian for sharing data, governing data access, you can significantly reduce the delay between accessing third-party data, law compliance and consuming data.","title":"Swiss Data Custodian overview"},{"location":"concept/overview/#architecture","text":"","title":"Architecture"},{"location":"concept/schema/","text":"Tag The list of tag (name, value) pairs that can be used to index the contract for faster retrieval Entry Description name Name of a tag value The value of the named tag. It can be a constant or a reference to a variable declared in var[], and can be null if the variable is not set Contract A list of human-readable descriptions of the contract Entry Description lang A 2-letter code of the language used for the contract title A short title description A human-readable descriptions of the contract Var The list of values that can be dereferenced in other part of the contract body, or template parameter whose values are defined in subsequent versions of the contract Entry Description id The local identifier used to dereference the variable value The value of the variable. Once set, it cannot be modified or removed from the contract regexp Restricts the set of values the variable can take if it is still undefined, ignored otherwise Subject The list of subjects who may perform the operations described in the contract Entry Description id The local identifier used to dereference the subject attribute A list of expressions on the subject attributes that must satisfied in order for the subject to be considered in that group. Verb The list of allowed operations Entry Description id The local identifier used to dereference the verb function The actual command represented by the verb (e.g., method identifier, query pattern,...) attribute A list of additional attributes describing the verb Object The list of resources that subjects are permitted to operate on Entry Description id The local identifier used to dereference the object. owner The Local identifier of the object owner. attribute A list of expressions on the object attributes that must satisfied in order for the object to be considered in that group.","title":"Schema"},{"location":"concept/schema/#tag","text":"The list of tag (name, value) pairs that can be used to index the contract for faster retrieval Entry Description name Name of a tag value The value of the named tag. It can be a constant or a reference to a variable declared in var[], and can be null if the variable is not set","title":"Tag"},{"location":"concept/schema/#contract","text":"A list of human-readable descriptions of the contract Entry Description lang A 2-letter code of the language used for the contract title A short title description A human-readable descriptions of the contract","title":"Contract"},{"location":"concept/schema/#var","text":"The list of values that can be dereferenced in other part of the contract body, or template parameter whose values are defined in subsequent versions of the contract Entry Description id The local identifier used to dereference the variable value The value of the variable. Once set, it cannot be modified or removed from the contract regexp Restricts the set of values the variable can take if it is still undefined, ignored otherwise","title":"Var"},{"location":"concept/schema/#subject","text":"The list of subjects who may perform the operations described in the contract Entry Description id The local identifier used to dereference the subject attribute A list of expressions on the subject attributes that must satisfied in order for the subject to be considered in that group.","title":"Subject"},{"location":"concept/schema/#verb","text":"The list of allowed operations Entry Description id The local identifier used to dereference the verb function The actual command represented by the verb (e.g., method identifier, query pattern,...) attribute A list of additional attributes describing the verb","title":"Verb"},{"location":"concept/schema/#object","text":"The list of resources that subjects are permitted to operate on Entry Description id The local identifier used to dereference the object. owner The Local identifier of the object owner. attribute A list of expressions on the object attributes that must satisfied in order for the object to be considered in that group.","title":"Object"},{"location":"reference/glossary/","text":"Glossary","title":"Glossary"},{"location":"reference/glossary/#glossary","text":"","title":"Glossary"},{"location":"roadmap/future/","text":"Future Development","title":"Future"},{"location":"roadmap/future/#future-development","text":"","title":"Future Development"},{"location":"roadmap/releaseNotes/","text":"Release Notes","title":"Releases Notes"},{"location":"roadmap/releaseNotes/#release-notes","text":"","title":"Release Notes"},{"location":"starting/installation/","text":"Installation Pre-requisites Installing with docker Install docker and docker-compose Copy the Custodian Directory git cLone https://gitlab.com/data-custodian/custodian.git Install the Swiss Data Custodian docker compose -f core/ucm/docker-compose.yml up --build docker compose -f core/acs/docker-compose.yml up --build docker compose -f core/epp/docker-compose.yml up --build Installing with Kubernetes Install Kompose curl -L https://storage.googleapis.com/kubernetes-release/release/${CI__KU_VERSION}/bin/linux/amd64/kubectl -o /bin/kubectl && chmod +x /bin/kubectl","title":"Quick Installation"},{"location":"starting/installation/#installation","text":"","title":"Installation"},{"location":"starting/installation/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"starting/installation/#installing-with-docker","text":"Install docker and docker-compose Copy the Custodian Directory git cLone https://gitlab.com/data-custodian/custodian.git Install the Swiss Data Custodian docker compose -f core/ucm/docker-compose.yml up --build docker compose -f core/acs/docker-compose.yml up --build docker compose -f core/epp/docker-compose.yml up --build","title":"Installing with docker"},{"location":"starting/installation/#installing-with-kubernetes","text":"Install Kompose curl -L https://storage.googleapis.com/kubernetes-release/release/${CI__KU_VERSION}/bin/linux/amd64/kubectl -o /bin/kubectl && chmod +x /bin/kubectl","title":"Installing with Kubernetes"},{"location":"starting/tutorial/","text":"Basic tutorial TBD Pre-requitites TBD Creating a Contract TBD","title":"Basic Tutorial"},{"location":"starting/tutorial/#basic-tutorial","text":"TBD","title":"Basic tutorial"},{"location":"starting/tutorial/#pre-requitites","text":"TBD","title":"Pre-requitites"},{"location":"starting/tutorial/#creating-a-contract","text":"TBD","title":"Creating a Contract"}]}